When would you want to use a remote repository rather than keeping all your work local?

	If I did not have access to a private computer and had to resort to a public computer. 

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

	If I understand the question, I definitely would prefer manual pulls to prevent overwriting a local version that was uncommitted. I would want to know what was in the local directory, and manually pulling would ensure that.

Describe the differences between forks, clones, and branches. When would you use one instead of another?

	A fork is a clone of a repository, but it is performed in GitHub.
	A clone is a copy of a repository to a local computer.
	A branch is a separate copy of a local repository.

	If I was working alone, I would clone to my local computer. 
	If I was working in a team, I'd fork and setup others to access the repository in GitHub.
	If I was experimenting, working on a bug fix, adding new functionality, I would create branch on local repository.

What is the benefit of having a copy of the last known state of the remote stored locally?

	I would think of the copy as a backup that resides in another location. And for the obvious reasons,
	if the GitHub remote repository was corrupt or lost its' integrity, a local copy may be used to rebuild it.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

	I suppose email and a common file share could be a method used. It would be harder because you
	would need to either 'eyeball' code or use system utilities manually to identify conflicts.
	You would need to know what people are involved and their association to the files.
	Branches would be separate clones with no HEAD identification which can lead to confusion.
	Not to mention the near impossible task of going back to a prior point of the files-- notice
	I didn't say prior commit point because commit management is performed by git.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

	If I was going to add new logic for a new feature or a fix, I'd play it safe and do it in a branch 
	because if I screwed things up or made things complicated, I can easily go back to master to start
	fresh. 

	If all I needed to do was fix a syntactical bug or change a setting, then I'd do that in master.






